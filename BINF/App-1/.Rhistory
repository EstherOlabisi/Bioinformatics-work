#   vary.size.pl <- base_vplot +
#   scale_fill_identity()+
#   new_scale_fill()+
#   geom_point(data = sig.df[sig.df$Difference > 0, ],
#              aes(size = right.grp),
#              fill = alpha("#FF6666", 0.2),
#              shape = 21)+
#   scale_size_binned(range = c(1,8),
#                     name = "Avg Intensity",
#                     n.breaks = 4)+
#   new_scale(new_aes = "size")+
#   geom_point(data = sig.df[sig.df$Difference < 0, ],
#              aes(size = left.grp), fill = alpha("#00B1B2", 0.2),
#              shape = 21)+
#   scale_size_binned(range = c(1,8),
#                     name = "Avg Intensity",
#                     n.breaks = 4)
#
#Options: GO term plot for sig proteins, with fdr lines and without fdr lines
if (go.terms == "sig" && fdr.lines == "yes") {
return (sig.go + curve.plot)
} else if (go.terms == "sig" && fdr.lines == "no") {
return (sig.go)
#Options: GO terms for non-sig proteins with fdr lines, without fdr lines, and default plot with color-coding of high and low expression proteins.
} else if (go.terms == "non-sig" && fdr.lines == "yes") {
return (nonsig.go + curve.plot)
} else if (go.terms == "non-sig" && fdr.lines == "no") {
return (nonsig.go)
#Sizes
# } else if(vary.sizes == "yes" && fdr.lines == "yes") {
#   return (vary.size.pl + curve.plot)
#
# } else if (vary.sizes == "yes" && fdr.lines == "no") {
#   return (vary.size.pl)
#
} else if (fdr.lines == "yes") {
return(
base_vplot +
scale_fill_identity(name = NULL,
labels = "Not significant",
guide = "legend")+
new_scale_fill()+
geom_point(data = sig.df, aes(fill = Expression),
size = s.sz, shape = s) +
scale_fill_manual(values = default.cols)+
guides(fill = guide_legend(order = 1))+
theme(legend.spacing = unit(-0.5, "cm"))+
curve.plot)
} else if (fdr.lines == "no") {
base_vplot +
scale_fill_identity(name = NULL,
labels = "Not significant",
guide = "legend")+
new_scale_fill()+
geom_point(data = sig.df, aes(fill = Expression),
size = s.sz, shape = s) +
scale_fill_manual(values = default.cols)+
guides(fill = guide_legend(order = 1))+
theme(legend.spacing = unit(-0.5, "cm"))
}
}
dt <- process.df(data = "ttest_table.txt")
curvesdff <- read.table("curve_matrix.txt", header = T)
volcano_plot(dt, curvesdff)
volcano_plot <- function(df, curves.df, go.terms = paste(""), plot.title = "", s0 = 1, fdr = 0.05, fdr.lines = paste("yes"), palette.col = paste("Viridis"), default.cols = c("#FF6666", "#00B1B2")) {
#Subsetting all significant and non-significant(ns) proteins into different dfs. Extract the number of unique GO terms in both sig and ns dfs. The numbers will be used for color-coding the GO terms downstream. Also, extract the x-axis label (in "Group1_Group2" format) from "significant" column
sig.df <- df[df$Significant == "+",]
ns.df <- df[df$Significant == "",]
num.sig.go <- length(unique(sig.df$Keywords))
num.ns.go <- length(unique(ns.df$Keywords))
label.col <- grep("significant", colnames(df)) #column index
xlab <- unique(sig.df[label.col])
#Custom settings for ggplots
a = 0.2 #alpha
s = 21  #shape
ns.sz = 2 #non-sig shape size
s.sz = 4  #sig shape size
#Base volcano plot to plot points, fdr curves, axes boundaries, and other custom arguments.
base_vplot <- ggplot(data = ns.df,
aes(x = Difference,
y = minus.log10.pval))+
geom_point(aes(fill = "grey"), size = ns.sz,
alpha = a, shape = s)+
labs(title = plot.title,
caption = paste("s0 =", s0, "  ", "FDR =", fdr),
x = paste0("Difference (", xlab, ")"),
y = expression(-log[10]("p-value")))+
suppressWarnings(xlim(min(df$Difference)-1,
max(df$Difference)+1))+
suppressWarnings(ylim(min(df$minus.log10.pval),
max(df$minus.log10.pval)+2))+
theme_minimal()+
theme(plot.title = element_text(face="bold", size = 20),
plot.caption = element_text(
colour = "darkviolet", size = 11))
#Fdr curves layer
curve.plot <- geom_line(data = curves.df, aes(x, y), linetype=2)
###Adding layers to the base plot
#Add GO terms for sig proteins
sig.go <- base_vplot +
scale_fill_identity()+  #hides grey legend from base plot
new_scale_fill()+
geom_point(data = sig.df,
aes(fill = Keywords), size = s.sz,
shape = s)+
scale_fill_manual(values = hcl.colors(
num.sig.go, palette.col, rev = F))
#Add GO terms for non-sig proteins. Grey out sig proteins.
nonsig.go <- base_vplot +
scale_fill_identity()+
new_scale_fill()+
geom_point(aes(fill = Keywords),
size = ns.sz, shape = s)+
geom_point(data = sig.df, fill = "grey",
size = s.sz, alpha = a,
shape = s)+
scale_fill_manual(values = hcl.colors(
num.ns.go,
palette.col,
rev = F))
###Add layer showing average protein abundance across samples
#Where right sample has the higher averages, the right averages are used for size variation. The same for where the left sample has the higher averages
# rowwise() %>%
#   mutate(left.grp = mean(c_across(left.st : left.end), na.rm = T)) %>%
#   mutate(right.grp = mean(c_across(right.st : right.end), na.rm = T))
#
#
#   vary.size.pl <- base_vplot +
#   scale_fill_identity()+
#   new_scale_fill()+
#   geom_point(data = sig.df[sig.df$Difference > 0, ],
#              aes(size = right.grp),
#              fill = alpha("#FF6666", 0.2),
#              shape = 21)+
#   scale_size_binned(range = c(1,8),
#                     name = "Avg Intensity",
#                     n.breaks = 4)+
#   new_scale(new_aes = "size")+
#   geom_point(data = sig.df[sig.df$Difference < 0, ],
#              aes(size = left.grp), fill = alpha("#00B1B2", 0.2),
#              shape = 21)+
#   scale_size_binned(range = c(1,8),
#                     name = "Avg Intensity",
#                     n.breaks = 4)
#
#Options: GO term plot for sig proteins, with fdr lines and without fdr lines
if (go.terms == "sig" && fdr.lines == "yes") {
return (sig.go + curve.plot)
} else if (go.terms == "sig" && fdr.lines == "no") {
return (sig.go)
#Options: GO terms for non-sig proteins with fdr lines, without fdr lines, and default plot with color-coding of high and low expression proteins.
} else if (go.terms == "non-sig" && fdr.lines == "yes") {
return (nonsig.go + curve.plot)
} else if (go.terms == "non-sig" && fdr.lines == "no") {
return (nonsig.go)
#Sizes
# } else if(vary.sizes == "yes" && fdr.lines == "yes") {
#   return (vary.size.pl + curve.plot)
#
# } else if (vary.sizes == "yes" && fdr.lines == "no") {
#   return (vary.size.pl)
#
} else if (fdr.lines == "yes") {
return(
base_vplot +
scale_fill_identity(name = NULL,
labels = "Not significant",
guide = "legend")+
new_scale_fill()+
geom_point(data = sig.df, aes(fill = Expression),
size = s.sz, shape = s) +
scale_fill_manual(values = default.cols)+
guides(fill = guide_legend(order = 1))+
theme(legend.spacing = unit(-0.5, "cm"))+
curve.plot)
} else if (fdr.lines == "no") {
base_vplot +
scale_fill_identity(name = NULL,
labels = "Not significant",
guide = "legend")+
new_scale_fill()+
geom_point(data = sig.df, aes(fill = Expression),
size = s.sz, shape = s) +
scale_fill_manual(values = default.cols)+
guides(fill = guide_legend(order = 1))+
theme(legend.spacing = unit(-0.5, "cm"))
}
}
dt <- process.df(data = "ttest_table.txt")
curvesdff <- read.table("curve_matrix.txt", header = T)
volcano_plot(dt, curvesdff)
volcano_plot <- function(df, curves.df, go.terms = paste(""), plot.title = "", s0 = 1, fdr = 0.05, fdr.lines = paste("yes"), palette.col = paste("Viridis"), default.cols = c("#FF6666", "#00B1B2")) {
#Subsetting all significant and non-significant(ns) proteins into different dfs. Extract the number of unique GO terms in both sig and ns dfs. The numbers will be used for color-coding the GO terms downstream. Also, extract the x-axis label (in "Group1_Group2" format) from "significant" column
sig.df <- df[df$Significant == "+",]
ns.df <- df[df$Significant == "",]
num.sig.go <- length(unique(sig.df$Keywords))
num.ns.go <- length(unique(ns.df$Keywords))
label.col <- grep("significant", colnames(df)) #column index
xlab <- unique(sig.df[label.col])
#Custom settings for ggplots
a = 0.2 #alpha
s = 21  #shape
ns.sz = 2 #non-sig shape size
s.sz = 4  #sig shape size
#Base volcano plot to plot points, fdr curves, axes boundaries, and other custom arguments.
base_vplot <- ggplot(data = ns.df,
aes(x = Difference,
y = minus.log10.pval))+
geom_point(aes(fill = "grey"), size = ns.sz,
alpha = a, shape = s)+
labs(title = plot.title,
caption = paste("s0 =", s0, "  ", "FDR =", fdr),
x = paste0("Difference (", xlab, ")"),
y = expression(-log[10]("p-value")))+
suppressWarnings({xlim(min(df$Difference)-1,
max(df$Difference)+1)})+
suppressWarnings({ylim(min(df$minus.log10.pval),
max(df$minus.log10.pval)+2)})+
theme_minimal()+
theme(plot.title = element_text(face="bold", size = 20),
plot.caption = element_text(
colour = "darkviolet", size = 11))
#Fdr curves layer
curve.plot <- geom_line(data = curves.df, aes(x, y), linetype=2)
###Adding layers to the base plot
#Add GO terms for sig proteins
sig.go <- base_vplot +
scale_fill_identity()+  #hides grey legend from base plot
new_scale_fill()+
geom_point(data = sig.df,
aes(fill = Keywords), size = s.sz,
shape = s)+
scale_fill_manual(values = hcl.colors(
num.sig.go, palette.col, rev = F))
#Add GO terms for non-sig proteins. Grey out sig proteins.
nonsig.go <- base_vplot +
scale_fill_identity()+
new_scale_fill()+
geom_point(aes(fill = Keywords),
size = ns.sz, shape = s)+
geom_point(data = sig.df, fill = "grey",
size = s.sz, alpha = a,
shape = s)+
scale_fill_manual(values = hcl.colors(
num.ns.go,
palette.col,
rev = F))
###Add layer showing average protein abundance across samples
#Where right sample has the higher averages, the right averages are used for size variation. The same for where the left sample has the higher averages
# rowwise() %>%
#   mutate(left.grp = mean(c_across(left.st : left.end), na.rm = T)) %>%
#   mutate(right.grp = mean(c_across(right.st : right.end), na.rm = T))
#
#
#   vary.size.pl <- base_vplot +
#   scale_fill_identity()+
#   new_scale_fill()+
#   geom_point(data = sig.df[sig.df$Difference > 0, ],
#              aes(size = right.grp),
#              fill = alpha("#FF6666", 0.2),
#              shape = 21)+
#   scale_size_binned(range = c(1,8),
#                     name = "Avg Intensity",
#                     n.breaks = 4)+
#   new_scale(new_aes = "size")+
#   geom_point(data = sig.df[sig.df$Difference < 0, ],
#              aes(size = left.grp), fill = alpha("#00B1B2", 0.2),
#              shape = 21)+
#   scale_size_binned(range = c(1,8),
#                     name = "Avg Intensity",
#                     n.breaks = 4)
#
#Options: GO term plot for sig proteins, with fdr lines and without fdr lines
if (go.terms == "sig" && fdr.lines == "yes") {
return (sig.go + curve.plot)
} else if (go.terms == "sig" && fdr.lines == "no") {
return (sig.go)
#Options: GO terms for non-sig proteins with fdr lines, without fdr lines, and default plot with color-coding of high and low expression proteins.
} else if (go.terms == "non-sig" && fdr.lines == "yes") {
return (nonsig.go + curve.plot)
} else if (go.terms == "non-sig" && fdr.lines == "no") {
return (nonsig.go)
#Sizes
# } else if(vary.sizes == "yes" && fdr.lines == "yes") {
#   return (vary.size.pl + curve.plot)
#
# } else if (vary.sizes == "yes" && fdr.lines == "no") {
#   return (vary.size.pl)
#
} else if (fdr.lines == "yes") {
return(
base_vplot +
scale_fill_identity(name = NULL,
labels = "Not significant",
guide = "legend")+
new_scale_fill()+
geom_point(data = sig.df, aes(fill = Expression),
size = s.sz, shape = s) +
scale_fill_manual(values = default.cols)+
guides(fill = guide_legend(order = 1))+
theme(legend.spacing = unit(-0.5, "cm"))+
curve.plot)
} else if (fdr.lines == "no") {
base_vplot +
scale_fill_identity(name = NULL,
labels = "Not significant",
guide = "legend")+
new_scale_fill()+
geom_point(data = sig.df, aes(fill = Expression),
size = s.sz, shape = s) +
scale_fill_manual(values = default.cols)+
guides(fill = guide_legend(order = 1))+
theme(legend.spacing = unit(-0.5, "cm"))
}
}
dt <- process.df(data = "ttest_table.txt")
curvesdff <- read.table("curve_matrix.txt", header = T)
volcano_plot(dt, curvesdff)
volcano_plot <- function(df, curves.df, go.terms = paste(""), plot.title = "", s0 = 1, fdr = 0.05, fdr.lines = paste("yes"), palette.col = paste("Viridis"), default.cols = c("#FF6666", "#00B1B2")) {
#Subsetting all significant and non-significant(ns) proteins into different dfs. Extract the number of unique GO terms in both sig and ns dfs. The numbers will be used for color-coding the GO terms downstream. Also, extract the x-axis label (in "Group1_Group2" format) from "significant" column
sig.df <- df[df$Significant == "+",]
ns.df <- df[df$Significant == "",]
num.sig.go <- length(unique(sig.df$Keywords))
num.ns.go <- length(unique(ns.df$Keywords))
label.col <- grep("significant", colnames(df)) #column index
xlab <- unique(sig.df[label.col])
#Custom settings for ggplots
a = 0.2 #alpha
s = 21  #shape
ns.sz = 2 #non-sig shape size
s.sz = 4  #sig shape size
#Base volcano plot to plot points, fdr curves, axes boundaries, and other custom arguments.
base_vplot <- ggplot(data = ns.df,
aes(x = Difference,
y = minus.log10.pval))+
geom_point(aes(fill = "grey"), size = ns.sz,
alpha = a, shape = s)+
labs(title = plot.title,
caption = paste("s0 =", s0, "  ", "FDR =", fdr),
x = paste0("Difference (", xlab, ")"),
y = expression(-log[10]("p-value")))+
xlim(min(df$Difference)-1,
max(df$Difference)+1)+
ylim(min(df$minus.log10.pval),
max(df$minus.log10.pval)+2)+
theme_minimal()+
theme(plot.title = element_text(face="bold", size = 20),
plot.caption = element_text(
colour = "darkviolet", size = 11))
#Fdr curves layer
curve.plot <- geom_line(data = curves.df, aes(x, y), linetype=2)
###Adding layers to the base plot
#Add GO terms for sig proteins
sig.go <- base_vplot +
scale_fill_identity()+  #hides grey legend from base plot
new_scale_fill()+
geom_point(data = sig.df,
aes(fill = Keywords), size = s.sz,
shape = s)+
scale_fill_manual(values = hcl.colors(
num.sig.go, palette.col, rev = F))
#Add GO terms for non-sig proteins. Grey out sig proteins.
nonsig.go <- base_vplot +
scale_fill_identity()+
new_scale_fill()+
geom_point(aes(fill = Keywords),
size = ns.sz, shape = s)+
geom_point(data = sig.df, fill = "grey",
size = s.sz, alpha = a,
shape = s)+
scale_fill_manual(values = hcl.colors(
num.ns.go,
palette.col,
rev = F))
###Add layer showing average protein abundance across samples
#Where right sample has the higher averages, the right averages are used for size variation. The same for where the left sample has the higher averages
# rowwise() %>%
#   mutate(left.grp = mean(c_across(left.st : left.end), na.rm = T)) %>%
#   mutate(right.grp = mean(c_across(right.st : right.end), na.rm = T))
#
#
#   vary.size.pl <- base_vplot +
#   scale_fill_identity()+
#   new_scale_fill()+
#   geom_point(data = sig.df[sig.df$Difference > 0, ],
#              aes(size = right.grp),
#              fill = alpha("#FF6666", 0.2),
#              shape = 21)+
#   scale_size_binned(range = c(1,8),
#                     name = "Avg Intensity",
#                     n.breaks = 4)+
#   new_scale(new_aes = "size")+
#   geom_point(data = sig.df[sig.df$Difference < 0, ],
#              aes(size = left.grp), fill = alpha("#00B1B2", 0.2),
#              shape = 21)+
#   scale_size_binned(range = c(1,8),
#                     name = "Avg Intensity",
#                     n.breaks = 4)
#
#Options: GO term plot for sig proteins, with fdr lines and without fdr lines
if (go.terms == "sig" && fdr.lines == "yes") {
return (sig.go + curve.plot)
} else if (go.terms == "sig" && fdr.lines == "no") {
return (sig.go)
#Options: GO terms for non-sig proteins with fdr lines, without fdr lines, and default plot with color-coding of high and low expression proteins.
} else if (go.terms == "non-sig" && fdr.lines == "yes") {
return (nonsig.go + curve.plot)
} else if (go.terms == "non-sig" && fdr.lines == "no") {
return (nonsig.go)
#Sizes
# } else if(vary.sizes == "yes" && fdr.lines == "yes") {
#   return (vary.size.pl + curve.plot)
#
# } else if (vary.sizes == "yes" && fdr.lines == "no") {
#   return (vary.size.pl)
#
} else if (fdr.lines == "yes") {
return(
base_vplot +
scale_fill_identity(name = NULL,
labels = "Not significant",
guide = "legend")+
new_scale_fill()+
geom_point(data = sig.df, aes(fill = Expression),
size = s.sz, shape = s) +
scale_fill_manual(values = default.cols)+
guides(fill = guide_legend(order = 1))+
theme(legend.spacing = unit(-0.5, "cm"))+
curve.plot)
} else if (fdr.lines == "no") {
base_vplot +
scale_fill_identity(name = NULL,
labels = "Not significant",
guide = "legend")+
new_scale_fill()+
geom_point(data = sig.df, aes(fill = Expression),
size = s.sz, shape = s) +
scale_fill_manual(values = default.cols)+
guides(fill = guide_legend(order = 1))+
theme(legend.spacing = unit(-0.5, "cm"))
}
}
dt <- process.df(data = "ttest_table.txt")
curvesdff <- read.table("curve_matrix.txt", header = T)
volcano_plot(dt, curvesdff)
runApp('Volcanoplot.R')
runApp('Volcanoplot.R')
runApp('Volcanoplot.R')
#left.st, left.end, right.st, right.end
dt2 <- dt %>%
mutate_at(c('Difference', 'minus.log10.pval'), as.numeric) %>%
mutate_at(lfq.cols, as.numeric) %>%
rowwise() %>%
mutate(left.grp = mean(c_across(5:8), na.rm = T)) %>%
mutate(right.grp = mean(c_across(1:4), na.rm = T))
#left.st, left.end, right.st, right.end
dt2 <- dt %>%
mutate_at(c('Difference', 'minus.log10.pval'), as.numeric) %>%
mutate_at(1:8, as.numeric) %>%
rowwise() %>%
mutate(left.grp = mean(c_across(5:8), na.rm = T)) %>%
mutate(right.grp = mean(c_across(1:4), na.rm = T))
#test
ggplot(data = ns.df,
aes(x = Difference,
y = minus.log10.pval))+
geom_point(aes(fill = "grey"), size = 2,
alpha = 0.2, shape = 21)+
scale_fill_identity()+
new_scale_fill()+
geom_point(data = sig.df[sig.df$Difference > 0, ],
aes(size = right.grp),
fill = alpha("#FF6666", 0.2),
shape = 21)+
scale_size_binned(range = c(1,8),
name = "Avg Intensity",
n.breaks = 4)+
new_scale(new_aes = "size")+
geom_point(data = sig.df[sig.df$Difference < 0, ],
aes(size = left.grp), fill = alpha("#00B1B2", 0.2),
shape = 21)+
scale_size_binned(range = c(1,8),
name = "Avg Intensity",
n.breaks = 4)
sig.df <- dt2[dt2$Significant == "+",]
ns.df <- dt2[dt2$Significant == "",]
#test
ggplot(data = ns.df,
aes(x = Difference,
y = minus.log10.pval))+
geom_point(aes(fill = "grey"), size = 2,
alpha = 0.2, shape = 21)+
scale_fill_identity()+
new_scale_fill()+
geom_point(data = sig.df[sig.df$Difference > 0, ],
aes(size = right.grp),
fill = alpha("#FF6666", 0.2),
shape = 21)+
scale_size_binned(range = c(1,8),
name = "Avg Intensity",
n.breaks = 4)+
new_scale(new_aes = "size")+
geom_point(data = sig.df[sig.df$Difference < 0, ],
aes(size = left.grp), fill = alpha("#00B1B2", 0.2),
shape = 21)+
scale_size_binned(range = c(1,8),
name = "Avg Intensity",
n.breaks = 4)
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
pwd
